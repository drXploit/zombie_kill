<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_belt</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Creation
global.instances++;

/*
    This belt "object" allows for offhand (secondary) attacks
    Flares distract enemies, especially in groups, making herd annihilation fun.
    Grenades are good for mass kills, but slow, loud.
    Throwing knives can be recovered from dead enemies. Good Damage, stealthy.
    
(default)   Press F for flares.
            Press G for grenades.
            Press T for throwing-knives.

    Features:
        Flares use smoke/flare effect.
                grab attention of nearby enemies, removing aggressiveness from player.
                can be found as enemy random drop.
        Grenades use the same explosion as bazooka missile.
                pin can be seen dropping.
                have fragmentation pieces fly in all directions causing more damage.
                can be found as enemy random drop.
        Knives have motion blur.
                have vibration effect when hitting walls.
                have ability to be recovered from wall or enemy.
                slow down after certain distance.
        
    
*/
flares = 3;

grenades = 3;

knives = 3;

depth = obj_player.depth - 1;

xscalar = obj_player.image_xscale;
yscalar = obj_player.image_yscale;

cannotThrow = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy
global.instances--;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Step


// update the position
x = obj_player.x;
y = obj_player.y - 15;

xscalar = obj_player.image_xscale;
//yscalar = obj_player.image_yscale;

if (cannotThrow &gt; 0) cannotThrow--;

depth = obj_player.depth - 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Use offhand weapon

if (global.offhand == 0)
{
    if (!instance_exists(obj_flare) &amp;&amp; flares &gt; 0)
    {
        instance_create(x,y,obj_flare);
        // Play sound
        audio_play_sound(snd_flare, 8, false);        
        flares--;
    }
}
else if (global.offhand == 1)
{
    if (!instance_exists(obj_grenade) &amp;&amp; grenades &gt; 0)
    {
        instance_create(x,y,obj_grenade);
        // Play sound
        audio_play_sound(snd_grenade_pin, 8, false);        
        grenades--;
    }
}
else if (global.offhand == 2)
{
    if (knives &gt; 0 &amp;&amp; cannotThrow == 0)
    {
        instance_create(x,y,obj_knife_throw);
        knives--;
        cannotThrow = 60;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy

instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
draw_self();

switch(global.offhand)
{
    case 0:
    if (flares != 0)
    for (i = 0; i &lt; flares; i++) 
    {
        draw_sprite_ext(spr_flare,0,x+(7*i)*(xscalar),y,image_xscale*.75,image_yscale*.75,85,c_white,image_alpha);
    }
    break;
    case 1:
    if (grenades != 0)
    for (i = 0; i &lt; grenades; i++)     
    {
        draw_sprite_ext(spr_grenade,0,x+(7*i)*(xscalar),y,image_xscale,image_yscale,image_angle,c_white,image_alpha);
    }
    break;
    case 2:
    if (knives != 0)
    for (i = 0; i &lt; knives; i++)     
    {
        draw_sprite_ext(spr_knife_throw,0,x+(7*i)*(xscalar),y+5,image_xscale/2,image_yscale/2,290,c_white,image_alpha);
    }
    break;
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
